generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model alembic_version {
  version_num String @id(map: "alembic_version_pkc") @db.VarChar(32)
}

model recipe {
  id           Int      @id @default(autoincrement())
  course       String   @db.VarChar(9)
  title        String   @db.VarChar(100)
  date_posted  DateTime @db.Timestamp(6)
  ingredients  String
  directions   String
  notes        String?
  recipe_image String?  @db.VarChar(60)
  user_id      Int
  user         user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id       Int      @id @default(autoincrement())
  username String   @unique @db.VarChar(20)
  email    String   @unique @db.VarChar(120)
  password String   @db.VarChar(60)
  recipe   recipe[]
  sessions Session[] // new
  accounts Account[] // new

}

// Adding schema for next-auth here

model Session {
  id       String   @id @default(cuid())
  sessionToken String @unique
  userId Int
  expires DateTime
  user user @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                 String  @id @default(cuid())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user user @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


